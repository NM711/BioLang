ATTEMPT TO BUILD AN LL(1) GRAMMAR FOR THE LANGUAGE.

<BOOLEAN> ::= "true" | "false"

<DIGIT> ::= [0-9]

<ALPHABET> ::= [a-z] | [A-Z]

<NUMBER> ::= <DIGIT> <NUMBER> |  ε

<WORD> ::= <ALPHABET> <WORD> |  ε

<ALPHANUM> ::= <NUMBER> <WORD> | <WORD> <NUMBER> |  ε

<IDENT> ::= <LETTER> <ALPHANUM>

<TYPE> ::= "string" | "float" | "int" | "boolean" | "void" | <IDENT>

<VAR> ::= "let " <IDENT> ": " <TYPE> ";"

<CONST> ::= "const " <IDENT> ": " <TYPE> ";"

<OBJECT> ::= "object" <IDENT> <OBJECTBLOCK> ";"

<LITERAL> ::= <NUMBER> | <WORD> | <BOOLEAN> | <ALPHANUM>

<VARTYPE> ::= <VAR> | <CONST>

<VARDECLARE> ::= <VARTYPE> " = " <LITERAL>

<ADDITIVE> ::= " + " | " - "
<MULTIPLICATIVE> ::= " * " | " / " | " % "

<INCREMENT> ::= "++"
<DECREMENT> ::= "--"

<INCRDECR> ::= <INCREMENT> | <DECREMENT>

<OPERATOR> ::= <ADDITIVE> | <MULTIPLICATIVE>

<UNARYEXPR> ::= <LITERAL> <OPERATOR> <LITERAL>

<BINARYEXPR> ::= <UNARYEXPR> <OPERATOR> <UNARYEXPR>

<EXPRESSION> ::= <BINARYEXPR> | <UNARYEXPR>

<IF> ::= "if" " (" <EXPRESSION> ") " <BLOCK>
<ELSEIF> ::= "else if " " (" <EXPRESSION> ") " <BLOCK> <ELSEIF'>
<ELSEIF'> ::= <ELSEIF> | ε
<ELSE> ::= "else " " (" <EXPRESSION> ") " <BLOCK> ";"

<CONDITION> ::= <IF> <TAIL>
<TAIL> ::= <ELSE> ";" | <ELSEIF> <TAIL'>
<TAIL'> ::= <ELSE> ";" | ";"

<POSTFIXER> ::= <IDENT> <INCRDECR>

<PREFIXER> ::= <INCRDECR> <IDENT>

<UPDATER> ::= <POSTFIXER> | <PREFIXER>

<FOR> ::= "for " " (" <VARDECLARE> "; " <EXPRESSION> "; " <UPDATER> ";" ") " <BLOCK> ";"

<WHILE> ::= "while" " (" <EXPRESSION> ") " <BLOCK> ";"

<BLOCK> ::= "{" <STMNT> "}"
<FIELDSCOPE> ::= "public" | "private"
<FIELDVALUE> ::= <FUNCTION> "," | <IDENT> ":" <VARTYPE> ","

<FIELDS> ::= <FIELDSCOPE> <FIELDVALUE>

<OBJECTBLOCK> ::= "{" <FIELDS> "}"

<STMNT> ::= <CONDITION> | <BLOCK> | <WHILE> | <VARDECLARE> | "continue" ε | "break" ε | ε

<FUNCTION> ::= "fn " <IDENT> "()" ": " <TYPE> " " <BLOCK> ";"

<FUNCTIONCALL> ::= <IDENT> "()" ";"
